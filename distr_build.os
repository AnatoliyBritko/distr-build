#Использовать v8runner

Перем СтруктураНастроек;

//Перем мКаталогСборки;
Перем Конфигуратор;
Перем ПараметрыЗапускаХранилища;
Перем КаталогЛогов;
Перем ПутьCfЦентральногоХранилища;
//Перем НомерСоздаваемогоРелиза;
//Перем КаталогРелизов;

Функция ПутьКВременномуКаталогу()
	Возврат СтруктураНастроек.КаталогСборки + "\-=sandbox=-\";
КонецФункции

Функция ПутьКВременнойБазе()
	Возврат ПутьКВременномуКаталогу() + "1CTempDB";
КонецФункции

Процедура ЗадатьНачальныеНастройки()
	
	// Считываем настройки из переданного файла с настройками.
	КолПараметров = АргументыКоманднойСтроки.Количество();
		
	//ГУИД = Новый УникальныйИдентификатор();
	//Сообщить(ГУИД);

	Если КолПараметров = 0 ТОгда
		Сообщить("Не указан путь к файлу с настройками");
		ЗавершитьРаботу(1294);
		//ProgramDirectory();
	КонецЕСли;

	ИмяФайла = АргументыКоманднойСтроки[0];

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		//Возврат;
	КонецПопытки;
		
	СтруктураНастроек = Новый Структура();

	Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Стр	= ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);   
		Стр = СокрЛП(Стр);
		//Сообщить(Стр);
		Если НомерСтроки = 1 Тогда
			СтруктураНастроек.Вставить("КаталогСборки",Стр);
		ИначеЕсли НомерСтроки = 2 Тогда
			СтруктураНастроек.Вставить("КаталогЦентральногоХранилища",Стр);
		ИначеЕсли НомерСтроки = 3 тогда
			СтруктураНастроек.Вставить("ПользовательЦентральногоХранилища",Стр);
		ИначеЕсли НомерСтроки = 4 Тогда
			СтруктураНастроек.Вставить("ПарольПользователяЦентральногоХранилища",Стр);
		ИначеЕсли НомерСтроки = 5 Тогда
			СтруктураНастроек.Вставить("КаталогХранилища",Стр);
		ИначеЕсли НомерСтроки = 6 тогда
			СтруктураНастроек.Вставить("ПользовательХранилища",Стр);
		ИначеЕсли НомерСтроки = 7 тогда
			СтруктураНастроек.Вставить("ПарольПользователяХранилища",Стр);
		ИначеЕсли НомерСтроки = 8 тогда
			СтруктураНастроек.Вставить("КаталогРелизов",Стр);
		ИначеЕсли НомерСтроки = 9 тогда
			СтруктураНастроек.Вставить("ФайлНастроекОбъединения",Стр);
		КонецЕсли;
		
	КонецЦикла;
	
	ГУИД = Новый УникальныйИдентификатор();
	СтруктураНастроек.КаталогСборки = СтруктураНастроек.КаталогСборки + СокрЛП(ГУИД) + "\";
	КаталогЛогов   = ПутьКВременномуКаталогу() +"DumpResults\";
	
	ПутьCfЦентральногоХранилища = ПутьКВременномуКаталогу() + "CfЦентральногоХранилища.cf";

	ПроверитьСуществованиеКаталога(ПутьКВременномуКаталогу());
	ПроверитьСуществованиеКаталога(КаталогЛогов);
	
КонецПроцедуры

Функция ПолучитьНомерРелиза(ИмяРелиза,ПолныйНомерРелиза = Ложь)
	мСписокРелиза = РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ИмяРелиза,".cf",""),".");
	
	мРедакцияРелиза    = Число(мСписокРелиза[мСписокРелиза.Количество() - 4]);
	мПодредакцияРелиза = Число(мСписокРелиза[мСписокРелиза.Количество() - 3]);
	мРелизРелиза       = Число(мСписокРелиза[мСписокРелиза.Количество() - 2]);
	Если ПолныйНомерРелиза Тогда
		мПодрелизРелиза    = Число(мСписокРелиза[мСписокРелиза.Количество() - 1]);
	Иначе
		мПодрелизРелиза    = 0; // Подрелиз 0 т.к. все включают в новый файл поставки.
	КонецЕсли;
	
	СтруктураКонфигурации = Новый Структура ("Редакция, Подредакция, Релиз, Подрелиз", мРедакцияРелиза, мПодредакцияРелиза, мРелизРелиза, мПодрелизРелиза);
	
	СтрКоэфф = Новый Структура ("Редакция, Подредакция, Релиз, Подрелиз", Число(1000000000000), Число(1000000000), Число(1000000), Число(1000));
	Возврат  РассчитатьЧислоКонфигурации(СтруктураКонфигурации, СтрКоэфф);
КонецФункции

Функция  РассчитатьЧислоКонфигурации(Знач СтруктураКонфигурации, Знач СтруктураКоэффициентов);
	мЧисло = 0;
	мЧисло = мЧисло + СтруктураКонфигурации.Редакция 	* СтруктураКоэффициентов.Редакция;
	мЧисло = мЧисло + СтруктураКонфигурации.Подредакция * СтруктураКоэффициентов.Подредакция;
	мЧисло = мЧисло + СтруктураКонфигурации.Релиз 		* СтруктураКоэффициентов.Релиз;
	мЧисло = мЧисло + СтруктураКонфигурации.Подрелиз 	* СтруктураКоэффициентов.Подрелиз;
	Возврат мЧисло;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(ИсходнаяСтрока, Разделитель)
	
	МассивПодстрок = Новый Массив;
	ОстатокСтроки = ИсходнаяСтрока;
	
	Поз = -1;
	Пока Поз <> 0 Цикл
	
		Поз = Найти(ОстатокСтроки, Разделитель);
		Если Поз > 0 Тогда
			Подстрока = Лев(ОстатокСтроки, Поз-1);
			ОстатокСтроки = Сред(ОстатокСтроки, Поз+1);
		Иначе
			Подстрока = ОстатокСтроки;
		КонецЕсли;
		
		МассивПодстрок.Добавить(Подстрока);
	
	КонецЦикла;
	
	Возврат МассивПодстрок;

КонецФункции

Процедура ПроверитьСуществованиеКаталога(КаталогВременнойБазы)
	Файл = Новый Файл(КаталогВременнойБазы);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(КаталогВременнойБазы);
	ИначеЕсли Файл.ЭтоКаталог() Тогда
		//УдалитьФайлы(КаталогВременнойБазы, "*.*");
	Иначе
		ВызватьИсключение "Не удалось создать каталог временной базы TempDB";
	КонецЕсли;
КонецПроцедуры

Процедура ИнициализироватьПараметрыВременнойБазы() 
	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.ИспользоватьВерсиюПлатформы("8.2.19.90");

	КаталогВременнойБазы = ПутьКВременнойБазе();
	ПроверитьСуществованиеКаталога(КаталогВременнойБазы);
	Конфигуратор.УстановитьКонтекст("/F"+КаталогВременнойБазы,"", "");
КонецПроцедуры

Процедура СоздатьВременнуюБазу()
	КаталогВременнойБазы = ПутьКВременнойБазе();
	Конфигуратор.КаталогСборки(СтруктураНастроек.КаталогСборки);
	Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойБазы);
КонецПроцедуры

// Получает из центрального хранилища файл cf, относительно которого будут обновляться все сотальные хранилища.
Процедура ПолучитьВерсиюИзХранилища()
	ИнициализироватьПараметрыВременнойБазы();
	СоздатьВременнуюБазу();
		
	//УстановитьТекущийКаталог(СтруктураНастроек.КаталогСборки);	
	//Конфигуратор.мКаталогСборки = ;
		
			
	ФайлКонфигурацииХранилища = Конфигуратор.ПолучитьВерсиюИзХранилища(СтруктураНастроек.КаталогЦентральногоХранилища, СтруктураНастроек.ПользовательЦентральногоХранилища,"" );	
	//Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурацииХранилища, Истина);
	ПереместитьФайл(ФайлКонфигурацииХранилища,ПутьCfЦентральногоХранилища);
	УдалитьФайлы(ПутьКВременнойБазе());
КонецПроцедуры

Процедура ПроверкаКонфигурации()
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ВнестиПараметрыПодключенияКХранилищу(ПараметрыЗапуска);

	ПараметрыЗапуска = ПараметрыЗапуска;
	ПараметрыЗапуска.Добавить("/CheckConfig -ConfigLogIntegrity -ThinClient -WebClient -Server -ExternalConnection -ExternalConnectionServer -ThickClientOrdinaryApplication -ThickClientServerOrdinaryApplication -DistributiveModules");
	ПараметрыЗапуска.Добавить(" /DumpResult " + КаталогЛогов + "CheckConfig.txt");
	Попытка
    		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
    		// вывод log-файла с сообщениями от платформы.
    		Сообщить(Конфигуратор.ВыводКоманды());
	КонецПопытки

КонецПроцедуры

Процедура ПроверкаМодулей()
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ВнестиПараметрыПодключенияКХранилищу(ПараметрыЗапуска);
	ПараметрыЗапуска.Добавить("/CheckModules -ThinClient -WebClient -Server -ExternalConnection -ThickClientOrdinaryApplication -AllExtensions");
	ПараметрыЗапуска.Добавить(" /DumpResult " + КаталогЛогов + "CheckModules.txt");
	Попытка
    		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
    		// вывод log-файла с сообщениями от платформы.
    		Сообщить(Конфигуратор.ВыводКоманды());
	КонецПопытки

КонецПроцедуры

Процедура ПодключитьсяКХранилищу()
		
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ВнестиПараметрыПодключенияКХранилищу(ПараметрыЗапуска);
	
	ПараметрыЗапуска.Добавить(" /ConfigurationRepositoryBindCfg -forceBindAlreadyBindedUser -forceReplaceCfg ");
	ПараметрыЗапуска.Добавить(" /DumpResult " + КаталогЛогов + "ConfigurationRepositoryBindCfg.txt");

	Попытка
    		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
    		// вывод log-файла с сообщениями от платформы.
    		Сообщить(Конфигуратор.ВыводКоманды());
	КонецПопытки

КонецПроцедуры

Процедура ВнестиПараметрыПодключенияКХранилищу(Источник)
	Для Каждого Элемент Из ПараметрыЗапускаХранилища Цикл
		Источник.Добавить(Элемент);
	КонецЦикла;
КонецПроцедуры



Процедура ЗахватитьХранилище()
	
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ВнестиПараметрыПодключенияКХранилищу(ПараметрыЗапуска);
	
	ПараметрыЗапуска.Добавить(" /ConfigurationRepositoryLock -revised ");
	ПараметрыЗапуска.Добавить(" /DumpResult " + КаталогЛогов + "ConfigurationRepositoryLock.txt");

	Попытка
    		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
    		// вывод log-файла с сообщениями от платформы.
    		Сообщить(Конфигуратор.ВыводКоманды());
	КонецПопытки

КонецПроцедуры

Процедура ПоместитьХранилище()

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ВнестиПараметрыПодключенияКХранилищу(ПараметрыЗапуска);

	ПараметрыЗапуска.Добавить(" /ConfigurationRepositoryCommit -comment ""Автоматич обновление "" -force ");
	ПараметрыЗапуска.Добавить(" /DumpResult " + КаталогЛогов + "ConfigurationRepositoryCommit.txt");

	Попытка
    		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
    		// вывод log-файла с сообщениями от платформы.
    		Сообщить(Конфигуратор.ВыводКоманды());
	КонецПопытки

КонецПроцедуры

Процедура ОбъединитьНаХранилище()
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ВнестиПараметрыПодключенияКХранилищу(ПараметрыЗапуска);
	
	
	//ПараметрыЗапуска.Добавить(" /MergeCfg """ + ПутьCfЦентральногоХранилища + """ -Settings """ + СтруктураНастроек.КаталогСборки + "MergeSettings.xml"" -ClearUnresolvedRefs ");
	//ПараметрыЗапуска.Добавить(" /MergeCfg """ + ПутьCfЦентральногоХранилища + """ -Settings """ + СтруктураНастроек.КаталогСборки + "MergeSettings.xml"" -ClearUnresolvedRefs -force ");	
	ПараметрыЗапуска.Добавить(" /MergeCfg """ + ПутьCfЦентральногоХранилища + """ -Settings """ + СтруктураНастроек.ФайлНастроекОбъединения + """ -ClearUnresolvedRefs -force ");	

	ПараметрыЗапуска.Добавить(" /DumpResult " + КаталогЛогов + "MergeCfg.txt");
	// -DisableSupport // не выполнять постановку на поддержку, даже если есть такая возможность.
	// -IncludeObjectsByUnresolvedRefs – если в настройках объединения есть объекты, не включенные в список объединяемых и отсутствующие в основной конфигурации, но на которые есть ссылки из объектов, 		// включенных в список, то такие объекты также помечаются для объединения, и выполняется попытка продолжить объединение. Попытки выполняются, пока не останется объектов со ссылками на не включенные 		// объекты, либо пока не выберется вся конфигурация. Аналогично кнопке Пометить все для объединения в окне с неразрешенными ссылками, только с повторением попыто
	// -force – проводить объединение в случае наличия:
	// ● предупреждений об удаляемых объектов, на которые есть ссылки в объектах, не участвующих в объединении (такие объекты будут исключены из объединения);
	// ● предупреждений о применении настроек.

	Попытка
    		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
    		// вывод log-файла с сообщениями от платформы.
    		Сообщить(Конфигуратор.ВыводКоманды());
	КонецПопытки
	
// [-force]

КонецПроцедуры

Функция СформироватьИмяCFU(МассивДистрибутивов)
	
	//#Если НЕ Клиент И НЕ Сервер И НЕ ВнешнееСоединение Тогда
	//	МассивДистрибутивов = Новый Массив;
	//#КонецЕсли
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяCFU");
	ТЗ.Колонки.Добавить("НомерCFU");
	
	Для Каждого Элемент Из МассивДистрибутивов Цикл
		НовТЗ = ТЗ.Добавить();
		НовТЗ.ИмяCFU	= Элемент.ИмяБезРасширения;
		НовТЗ.НомерCFU 	= ПолучитьНомерРелиза(Элемент.Имя,Истина);
		//Сообщить(Элемент.ПолноеИмя);
	КонецЦикла;
	
	ИмяCFU			= ""; 
	ПоследнийНомер	= 0;
	ТЗ.Сортировать("НомерCFU");
	
	ВсегоСтрокТЗ = ТЗ.Количество() - 1;
	Для i = 0 По ВсегоСтрокТЗ Цикл
		Если i = 0 Тогда
			ИмяCFU = ТЗ[i].ИмяCFU;
		Иначе
			
			// Добавляем если только следующий будет не +1.
			ДобавитьИмяCFU = Ложь;
			Если i = ВсегоСтрокТЗ Тогда
				ДобавитьИмяCFU = Истина;
			ИначеЕсли ТЗ[i+1].НомерCFU - ТЗ[i].НомерCFU <> 1000 Тогда	
				ДобавитьИмяCFU = Истина;
			ИначеЕсли ТЗ[i].НомерCFU - ТЗ[i-1].НомерCFU <> 1000 Тогда	
				ДобавитьИмяCFU = Истина;
			КонецЕсли;
			
			Если ДобавитьИмяCFU Тогда
				// Проверяем если разница с предыдущим 1000, то ставит "-", иначе ","
				Если ТЗ[i].НомерCFU - ТЗ[i-1].НомерCFU = 1000 Тогда
					ИмяCFU = ИмяCFU + " - ";
				Иначе
					ИмяCFU = ИмяCFU + ", ";
				КонецЕсли;
				
				ИмяCFU = ИмяCFU + ТЗ[i].ИмяCFU;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	ИмяCFU = СтруктураНастроек.НомерСоздаваемогоРелиза + " [" + СокрЛП(ИмяCFU) + "]";
	//Сообщить(ИмяCFU);
	Возврат ИмяCFU;
КонецФункции


Функция ПолучитьМассивСfдляРелиза()

	НомерНовогоРелиза	= ПолучитьНомерРелиза(СтруктураНастроек.НомерСоздаваемогоРелиза,Истина);
	СписокФайлов		= НайтиФайлы(СтруктураНастроек.КаталогРелизов,"*.cf",Истина);
	
	// Определим макс номер релиза т.е. фактически номер релиза, который был перед нашим.
	мЧислоРелизаМакс = 0;
	Для каждого мФайл Из СписокФайлов Цикл
		мЧислоРелизаРасчет = ПолучитьНомерРелиза(мФайл.Имя);
		Если мЧислоРелизаРасчет < НомерНовогоРелиза Тогда
			Если мЧислоРелизаМакс < мЧислоРелизаРасчет Тогда
				мЧислоРелизаМакс = мЧислоРелизаРасчет;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивРелизовДляОбновления = Новый Массив;
	Для каждого мФайл Из СписокФайлов Цикл
		мЧислоРелизаРасчет = ПолучитьНомерРелиза(мФайл.Имя,Истина);
		Если мЧислоРелизаРасчет < НомерНовогоРелиза Тогда
			Если мЧислоРелизаМакс <= мЧислоРелизаРасчет Тогда
				МассивРелизовДляОбновления.Добавить(мФайл);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРелизовДляОбновления;
	
КонецФункции

Процедура СоздатьФайлПоставки()

	Конфигуратор.ОбновитьКонфигурациюБазыДанных();
	
	// Определим номер создаваемого релиза.

	Путь = ПутьКВременнойБазе();
	Пользователь = "";

	Парам = "File="+""""+ Путь+""""+ ";Usr="+"""" + Пользователь +"""" +";Pwd="""";";
	V82COMConnector	= Новый COMОбъект("V82.COMConnector");
	V82COMConnector	= V82COMConnector.Connect(Парам);
	НомерСоздаваемогоРелиза = V82COMConnector.Метаданные.Версия;
	СтруктураНастроек.Вставить("НомерСоздаваемогоРелиза",НомерСоздаваемогоРелиза);
	V82COMConnector = "";
	
	// в ПараметрахЗапуска уже добавлены ключи DESIGNER, строка соединения с ИБ, пользователь и пароль
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ВнестиПараметрыПодключенияКХранилищу(ПараметрыЗапуска);

	ИмяСоздаваемогоСF = СтруктураНастроек.КаталогСборки  + СтруктураНастроек.НомерСоздаваемогоРелиза + ".cf"; 
	ИмяСоздаваемогоСFU = СтруктураНастроек.КаталогСборки + СтруктураНастроек.НомерСоздаваемогоРелиза + ".cfu";

	ПараметрыЗапуска.Добавить("/CreateDistributionFiles -cffile """ + ИмяСоздаваемогоСF + """");

	МассивДистрибутивов = ПолучитьМассивСfдляРелиза();
	Если МассивДистрибутивов.Количество() > 0 Тогда
		НомерСоздаваемогоРелизаCFU = СформироватьИмяCFU(МассивДистрибутивов);
		ИмяСоздаваемогоСFU = СтруктураНастроек.КаталогСборки + НомерСоздаваемогоРелизаCFU + ".cfu";
		ПараметрыЗапуска.Добавить(" -cfufile """ + ИмяСоздаваемогоСFU + """");
		Сообщить(ИмяСоздаваемогоСFU);
		Для Каждого Элемент Из МассивДистрибутивов Цикл
			ПараметрыЗапуска.Добавить(" -f " + """" +  Элемент.ПолноеИмя + """");
			Сообщить(Элемент.ПолноеИмя);
		КонецЦикла;

	КонецЕсли;

	ПараметрыЗапуска.Добавить(" /DumpResult " + КаталогЛогов + "CreateDistributionFiles.txt");	

	Попытка
    		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
    		// вывод log-файла с сообщениями от платформы.
    		Сообщить(Конфигуратор.ВыводКоманды());
	КонецПопытки
	
КонецПроцедуры


Процедура ВыполнитьРаботыНаХранилище()
	ИнициализироватьПараметрыВременнойБазы();
	СоздатьВременнуюБазу();
	Конфигуратор.ИспользоватьВерсиюПлатформы("8.3.8");
		
	СтрокаСоединения 		= СтруктураНастроек.КаталогХранилища;
	ПользовательХранилища 	= СтруктураНастроек.ПользовательХранилища;//"reliz";
	КаталогРелизов			= СтруктураНастроек.КаталогРелизов;

	ПараметрыЗапускаХранилища = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапускаХранилища.Добавить(" /ConfigurationRepositoryF """+СтрокаСоединения+"""");
	ПараметрыЗапускаХранилища.Добавить(" /ConfigurationRepositoryN """+ПользовательХранилища+"""");

	ПодключитьсяКХранилищу();
	ЗахватитьХранилище();
	ОбъединитьНаХранилище();
	ПоместитьХранилище();
	
	Конфигуратор.ИспользоватьВерсиюПлатформы("8.2.19");
	СоздатьФайлПоставки();
	ПроверкаКонфигурации();
	ПроверкаМодулей();
КонецПроцедуры


ЗадатьНачальныеНастройки();
ПолучитьВерсиюИзХранилища();	// Получаем последнюю версию их хранилища ХР базы.
ВыполнитьРаботыНаХранилище();



///////////СоздатьВременнуюБазу(); 	// Создаем временную пустую базу.

//СоздатьФайлПоставки();		// Моздаем файл поставки и обновления. cf b cfu
//ПроверкаКонфигурации();		// загружаем cf(u) в базу и выполняем синтаксические контроль.
//ПроверкаМодулей();


//ВыполнитьРаботыНаХранилище();
//ПодключитьсяКХранилищу();
//ЗахватитьХранилище();
//ОбъединитьНаХранилище();
//ПоместитьХранилище();

//1. Создаем чистую базу.
//2.0 При необходимости накатываем на хранилище Изменения из центрального хранилища.
//2.1 Запускаепм на хранилище проверку модулей + проверку конфигурации.
//3. Получаем крайний cf с хранилища.
//4. Обновляем созданную в п.п. 1 базу cf из хранилища.
//5. Создаем файлы поставки и обновления.
//6. Создаем дистрибутив.
//6. Удаляем. базу, созданную в п.п. 1. 

Сообщить("Работа завершена");